---
title: "Merging"
format: html
editor: visual
---

## Correzioni manuali

Preparazione

```{r}
Sys.setlocale("LC_ALL", "UTF-8")
library(dplyr, warn.conflicts = FALSE)
library(arrow, warn.conflicts = FALSE)
library(openxlsx, warn.conflicts = FALSE)
library(assertr, warn.conflicts = FALSE)

source("src/database/startup.R")
source("src/database/query/data.R")
source("notebooks/corrections/manual_corrections.R")
source("notebooks/ds_regionali/procedure/checkpoint.R")

conns <- load_dbs()
sets <- c("ER", "FVG", "LOM", "MAR", "TAA2", "TOS", "UMB", "VDA", "PIE", "LIG", "VEN", "SWI", "SLO", "FRA", "AUT")
```

Caricamento di metadati e correzioni

```{r}
merged_metadata <- query_checkpoint_meta(sets, "merged", conns$data) |>
  collect() |>
  as.data.frame()

corrections <- fs::path_abs("./external/correzioni") |>
  load_corrections()

to_integr_cols <- corrections |>
  colnames() |>
  str_subset(regex("_ok$")) |>
  str_remove(regex("_ok$"))
integrator_cols <- corrections |>
  colnames() |>
  str_subset(regex("_ok$"))
to_integr_cols
```

Riempio alcune colonne con dei valori di default omessi per comodità

```{r}
co <- prepare_corrections(corrections, merged_metadata)
```

Controllo se ci sono stazioni rimaste fuori

```{r}
s <- merged_metadata |>
    full_join(co, by = c("from_sensor_keys", "from_datasets", "dataset"), relationship = "one-to-one") |>
    filter(is.na(network)) |>
    select(dataset, series_key, from_datasets, from_sensor_keys, name) |>
    unnest_longer(c(from_datasets, from_sensor_keys))
s
```

```{r}
query_checkpoint_data(c("SCIA", "ISAC"), "raw", conns$data, hive_types = list("variable" = "INT")) |>
  semi_join(s, by = c("dataset" = "from_datasets", "sensor_key" = "from_sensor_keys"), copy = T) |>
  distinct(dataset, sensor_key, variable) |>
  collect()
```

Integrazione delle correzioni

```{r}
source("notebooks/corrections/manual_corrections.R")
corrected_metadata <- integrate_corrections(merged_metadata, corrections, conns$stations)
```

Salvataggio in formato checkpoint

```{r}
source("notebooks/ds_regionali/procedure/checkpoint.R")
data <- query_checkpoint_data(sets, "merged", conns$data) |> to_arrow()
chkpt <- as_checkpoint(corrected_metadata, data, check_schema = FALSE)
save_checkpoint(chkpt, "full", "merged_corrected", check_schema = FALSE, partitioning = c("variable"), key = "series_key")
print("✅")
```

```{r}
query_checkpoint_data("full", "merged_corrected", conns$data) |> filter(dataset == "SWI")
```